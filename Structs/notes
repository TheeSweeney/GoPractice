Structs
    similar in concept to JS object
 
    syntax:

        creating a struct

            type person struct {
                // firstName string
                // lastName  string
                // since both parts of the struct are string, it can be written as
                firstName, lastName string
            }

        populating struct, 3 methods:

            alex := person{"Alex", "Anderson"}
            
                - if we do not specify, fields will be assigned in the order they exist in the struct
                - not great in case we want to reorder the struct

            alex := person{firstName: "Alex", lastName: "Anderson"}

                - this way we can add fields in any order, and can impartially complete a struct - if a struct has three fields, we can assign values to the firs and third

            var alex person
                - when creating var in go but assigning it no value, Go assigns it a "Zero value" to it or it's contituent parts
                    - any string fields will be assigned:
                        ""
                    - any int fields   
                        0
                    - float
                        0
                    - bool
                        false
        updating structs:
            //assuming alex has been created using any of the three methods above
            alex.firstName = "Butts"
            alex.lastName = "McGee"

    We can also place structs inside of other structs
        type contactInfo struct {
            email   string
            zipCode int
        }

        type person struct {
            firstName,
            lastName string
            contact contactInfo
        }

        jim := person{
            firstName: "Jim",
            lastName:  "Party",
            contact: contactInfo{
                email:   "jim@gmail.com",
                zipCode: 90201,
            },
        }
        
    
    Multiline struct declarations must end with a trailling comma:
        jim := person{
            firstName: "Jim",
            lastName:  "Party",
        }
    
    If a fieldname and its type are the same the following syntax can be used:

        type contactInfo struct {
            email   string
            zipCode int
        }

        type person struct {
            firstName,
            lastName string
            contactInfo                 <<<Note difference
        }

        jim := person{
            firstName: "Jim",
            lastName:  "Party",
            contactInfo: contactInfo{   <<<Note difference
                email:   "jim@gmail.com",
                zipCode: 90201,
            },
        }

    We can attach receiver functions to structs:
        func (p person) print() {
            fmt.Printf("%+v", p)
        }

        //assuming a person struct called "jim" was created as above

        jim.print()
        >>{firstName:Jim lastName:Party contactInfo:{email:jim@gmail.com zipCode:90201}}
Printf
    print statement that allows for string interpolation and formatting

Go and Pointers
    func (p person) updateName(newFirstName string) {
    	p.firstName = newFirstName
    }
        - Go is a pass by value language, so the above code will not work as expected.
        - When we pass a value into a function, the function acts on a copy of the value, not the original value

    `&variable` - give me access to memory address of variable

    `*pointer` - give me the value this memory address is pointing at

***********pointer example**************
func main() {
	jim := person{
		firstName: "Jim",
		lastName:  "Party",
		contactInfo: contactInfo{
			email:   "jim@gmail.com",
			zipCode: 90201,
		},
	}

	jim.print()

	jimPointer := &jim
	//jim is a reference to the struct
	//using the `&` we turn &jim into a memory address or pointer
	jimPointer.updateName("Jimmy")

	jim.print()
}

func (pointerToPerson *person) updateName(newFirstName string) {
	//^^^ a `*` in front of a type means we're working with a pointer to one of those types - here a point to a person
	//this is a description a type
	(*pointerToPerson).firstName = newFirstName
	//^^^ a `*` here means 'take this mem address and turn it into a value'
}

    - Turn an address into a vlaue with *address
    - Turn a value into an address with &value

    if we have a function where one the of parameters is specified as a pointer
        
        func (pointerToPerson *person) updateName(newFirstName string) {
            //do work
        }
        
        Go allows us to enter a pointer that type:
            
            (jimPointer = &jim) 
            jimPointer.upDateName("butt")

        OR just a value of the type

            jim.upDateName("butt")