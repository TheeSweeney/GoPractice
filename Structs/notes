Structs
    similar in concept to JS object
 
    syntax:

        creating a struct

            type person struct {
                // firstName string
                // lastName  string
                // since both parts of the struct are string, it can be written as
                firstName, lastName string
            }

        populating struct, 3 methods:

            alex := person{"Alex", "Anderson"}
            
                - if we do not specify, fields will be assigned in the order they exist in the struct
                - not great in case we want to reorder the struct

            alex := person{firstName: "Alex", lastName: "Anderson"}

                - this way we can add fields in any order, and can impartially complete a struct - if a struct has three fields, we can assign values to the firs and third

            var alex person
                - when creating var in go but assigning it no value, Go assigns it a "Zero value" to it or it's contituent parts
                    - any string fields will be assigned:
                        ""
                    - any int fields   
                        0
                    - float
                        0
                    - bool
                        false
        updating structs:
            //assuming alex has been created using any of the three methods above
            alex.firstName = "Butts"
            alex.lastName = "McGee"

    We can also place structs inside of other structs
        type contactInfo struct {
            email   string
            zipCode int
        }

        type person struct {
            firstName,
            lastName string
            contact contactInfo
        }

        jim := person{
            firstName: "Jim",
            lastName:  "Party",
            contact: contactInfo{
                email:   "jim@gmail.com",
                zipCode: 90201,
            },
        }
        
    
    Multiline struct declarations must end with a trailling comma:
        jim := person{
            firstName: "Jim",
            lastName:  "Party",
        }
    
    If a fieldname and its type are the same the following syntax can be used:

        type contactInfo struct {
            email   string
            zipCode int
        }

        type person struct {
            firstName,
            lastName string
            contactInfo                 <<<Note difference
        }

        jim := person{
            firstName: "Jim",
            lastName:  "Party",
            contactInfo: contactInfo{   <<<Note difference
                email:   "jim@gmail.com",
                zipCode: 90201,
            },
        }
Printf
    print statement that allows for string interpolation and formatting
